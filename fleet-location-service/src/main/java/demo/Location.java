/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package demo;

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A POJO representation of a truck on the road.
 *
 * Auto-generated by http://www.jsonschema2pojo.org/.
 *
 * @author Dave Syer
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Entity
public class Location {

	enum GpsStatus {
		EXCELLENT,OK,UNRELIABLE,BAD,NOFIX,UNKNOWN;
	}

	enum VehicleMovementType {
		STOPPED, IN_MOTION;
		public boolean isMoving() {
			return this != STOPPED;
		}
	}

	@Id
	@GeneratedValue
	private Long id;
	@Embedded
	@AttributeOverride(name = "engineMake", column = @Column(name = "unit_engine_make"))
	private final UnitInfo unitInfo;
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name = "fmi", column = @Column(name = "unit_fmi")),
		@AttributeOverride(name = "spn", column = @Column(name = "unit_spn")) })
	private UnitFault unitFault;
	private double latitude;
	private double longitude;
	private String heading;
	private double gpsSpeed;
	private GpsStatus gpsStatus;
	private double odometer;
	private double totalEngineTime;
	private double totalIdleTime;
	private double totalFuelUsage;
	private String address;
	private Date timestamp = new Date();
	private String tspProvider;
	private VehicleMovementType vehicleMovementType = VehicleMovementType.STOPPED;
	private String serviceType;
	// TODO: why is this not part of UnitFault?
	@Embedded
	private FaultCode faultCode;

	public Location(UnitInfo unitInfo) {
		this.unitInfo = unitInfo;
	}

	@SuppressWarnings("unused")
	private Location() {
		this.unitInfo = null;
	}

	@JsonCreator
	private Location(@JsonProperty("vin") String vin) {
		this.unitInfo = new UnitInfo(vin);
	}

	public String getVin() {
		return this.unitInfo == null ? null : this.unitInfo.getUnitVin();
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public UnitInfo getUnitInfo() {
		return unitInfo;
	}

	public UnitFault getUnitFault() {
		return unitFault;
	}

	public void setUnitFault(UnitFault unitFault) {
		this.unitFault = unitFault;
	}

	public double getLatitude() {
		return latitude;
	}

	public void setLatitude(double latitude) {
		this.latitude = latitude;
	}

	public double getLongitude() {
		return longitude;
	}

	public void setLongitude(double longitude) {
		this.longitude = longitude;
	}

	public String getHeading() {
		return heading;
	}

	public void setHeading(String heading) {
		this.heading = heading;
	}

	public double getGpsSpeed() {
		return gpsSpeed;
	}

	public void setGpsSpeed(double gpsSpeed) {
		this.gpsSpeed = gpsSpeed;
	}

	public GpsStatus getGpsStatus() {
		return gpsStatus;
	}

	public void setGpsStatus(GpsStatus gpsStatus) {
		this.gpsStatus = gpsStatus;
	}

	public double getOdometer() {
		return odometer;
	}

	public void setOdometer(double odometer) {
		this.odometer = odometer;
	}

	public double getTotalEngineTime() {
		return totalEngineTime;
	}

	public void setTotalEngineTime(double totalEngineTime) {
		this.totalEngineTime = totalEngineTime;
	}

	public double getTotalIdleTime() {
		return totalIdleTime;
	}

	public void setTotalIdleTime(double totalIdleTime) {
		this.totalIdleTime = totalIdleTime;
	}

	public double getTotalFuelUsage() {
		return totalFuelUsage;
	}

	public void setTotalFuelUsage(double totalFuelUsage) {
		this.totalFuelUsage = totalFuelUsage;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Date getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	public String getTspProvider() {
		return tspProvider;
	}

	public void setTspProvider(String tspProvider) {
		this.tspProvider = tspProvider;
	}

	public VehicleMovementType getVehicleMovementType() {
		return vehicleMovementType;
	}

	public void setVehicleMovementType(
			VehicleMovementType vehicleMovementType) {
		this.vehicleMovementType = vehicleMovementType;
	}

	public String getServiceType() {
		return serviceType;
	}

	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}

	public FaultCode getFaultCode() {
		return faultCode;
	}

	public void setFaultCode(FaultCode faultCode) {
		this.faultCode = faultCode;
	}

	@Override public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Location location = (Location) o;

		if (Double.compare(location.latitude, latitude) != 0) return false;
		if (Double.compare(location.longitude, longitude) != 0) return false;
		if (Double.compare(location.gpsSpeed, gpsSpeed) != 0) return false;
		if (Double.compare(location.odometer, odometer) != 0) return false;
		if (Double.compare(location.totalEngineTime, totalEngineTime) != 0) return false;
		if (Double.compare(location.totalIdleTime, totalIdleTime) != 0) return false;
		if (Double.compare(location.totalFuelUsage, totalFuelUsage) != 0) return false;
		if (id != null ? !id.equals(location.id) : location.id != null) return false;
		if (unitInfo != null ?
				!unitInfo.equals(location.unitInfo) :
				location.unitInfo != null) return false;
		if (unitFault != null ?
				!unitFault.equals(location.unitFault) :
				location.unitFault != null) return false;
		if (heading != null ?
				!heading.equals(location.heading) :
				location.heading != null)
			return false;
		if (gpsStatus != location.gpsStatus) return false;
		if (address != null ?
				!address.equals(location.address) :
				location.address != null)
			return false;
		if (timestamp != null ?
				!timestamp.equals(location.timestamp) :
				location.timestamp != null) return false;
		if (tspProvider != null ?
				!tspProvider.equals(location.tspProvider) :
				location.tspProvider != null) return false;
		if (vehicleMovementType != location.vehicleMovementType) return false;
		if (serviceType != null ?
				!serviceType.equals(location.serviceType) :
				location.serviceType != null) return false;
		return !(faultCode != null ?
				!faultCode.equals(location.faultCode) :
				location.faultCode != null);

	}

	@Override public int hashCode() {
		int result;
		long temp;
		result = id != null ? id.hashCode() : 0;
		result = 31 * result + (unitInfo != null ? unitInfo.hashCode() : 0);
		result = 31 * result + (unitFault != null ? unitFault.hashCode() : 0);
		temp = Double.doubleToLongBits(latitude);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		result = 31 * result + (heading != null ? heading.hashCode() : 0);
		temp = Double.doubleToLongBits(gpsSpeed);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		result = 31 * result + (gpsStatus != null ? gpsStatus.hashCode() : 0);
		temp = Double.doubleToLongBits(odometer);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(totalEngineTime);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(totalIdleTime);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(totalFuelUsage);
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		result = 31 * result + (address != null ? address.hashCode() : 0);
		result = 31 * result + (timestamp != null ? timestamp.hashCode() : 0);
		result = 31 * result + (tspProvider != null ? tspProvider.hashCode() : 0);
		result = 31 * result + (vehicleMovementType != null ?
				vehicleMovementType.hashCode() :
				0);
		result = 31 * result + (serviceType != null ? serviceType.hashCode() : 0);
		result = 31 * result + (faultCode != null ? faultCode.hashCode() : 0);
		return result;
	}

	@Override public String toString() {
		return "Location{" +
				"id=" + id +
				", unitInfo=" + unitInfo +
				", unitFault=" + unitFault +
				", latitude=" + latitude +
				", longitude=" + longitude +
				", heading='" + heading + '\'' +
				", gpsSpeed=" + gpsSpeed +
				", gpsStatus=" + gpsStatus +
				", odometer=" + odometer +
				", totalEngineTime=" + totalEngineTime +
				", totalIdleTime=" + totalIdleTime +
				", totalFuelUsage=" + totalFuelUsage +
				", address='" + address + '\'' +
				", timestamp=" + timestamp +
				", tspProvider='" + tspProvider + '\'' +
				", vehicleMovementType=" + vehicleMovementType +
				", serviceType='" + serviceType + '\'' +
				", faultCode=" + faultCode +
				'}';
	}
}
